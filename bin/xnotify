#!/usr/bin/env python2
#took from da-x/xnotify, then tweaked a bit.

import Xlib.display
import Xlib.protocol
import Xlib.X as X

import time
import signal

def run(
    timeout = 1,
    background_color = 'black',
    foreground_color = 'white',
    border_color = 'black',
    do_blink = False,
    blink_rate = 0.05,
    blink_duration = 0.5,
    position = (100, 100),
    font_name = "-misc-dejavu sans light-extralight-r-normal--72-0-0-0-p-0-iso8859-1",
    text = None,
    border = 5,
    ):

    disp = Xlib.display.Display()
    screen = disp.screen()
    colormap = screen.default_colormap
    root = screen.root

    background_pixel = colormap.alloc_named_color(background_color).pixel
    foreground_pixel = colormap.alloc_named_color(foreground_color).pixel
    border_pixel = colormap.alloc_named_color(border_color).pixel

    win = root.create_window(position[0], position[1], 1, 1, 1,
                             X.CopyFromParent, X.InputOutput,
                             X.CopyFromParent,
                             event_mask = X.ExposureMask | X.StructureNotifyMask |
                             X.ButtonPressMask | X.KeyPressMask,
                             override_redirect = True,
                             )

    font = disp.open_font(font_name);
    gc = win.create_gc(foreground = foreground_pixel, font = font)
    gc_background = win.create_gc(foreground = background_pixel, font = font)

    text_width = 0
    text_height = 0
    text_lines = 0

    for line in text.split("\n"):
        if len(line) != 0:
            data = gc.query_text_extents(line)
            text_width = max(data._data['overall_width'], text_width)
            text_height = max(data._data['font_ascent'], text_height)
        text_lines += 1

    gc_frame = win.create_gc(
        foreground = border_pixel,
        font = font
        )

    data = disp.get_input_focus()
    win.map()
    disp.sync()

    disp.set_input_focus(data._data['focus'], data._data['revert_to'], Xlib.X.CurrentTime)

    geo = root.get_geometry()
    screen_width = geo.width
    screen_height = geo.height

    width = text_width+border*2
    height = text_lines*text_height+border*2
    workarea = (width, height)

    x = (screen_width / 2) - (width / 2)
    y = screen_height - height - 42

    win.configure(x=x, y=y, width=width, height=height)

    start_time = time.time()
    blink_time = start_time + blink_duration
    blink_next = blink_rate
    blink_state = [None]

    def on_timeout(sig, frame):
        win.destroy()

    signal.signal(signal.SIGALRM, on_timeout)
    signal.alarm(timeout)

    def draw(invert = 0):
        gcs = (gc, gc_background)
        if invert:
            gcs = (gcs[1], gcs[0])

        win.fill_rectangle(gcs[1], 1, 1, workarea[0]-2, workarea[1]-2);
        win.rectangle(gc_frame, 0, 0, workarea[0]-1, workarea[1]-1);

        ypos = 0
        for line in text.split("\n"):
            win.draw_text(gcs[0], border, text_height+border + ypos, line)
            ypos += text_height

    while 1:
        if do_blink:
            last_time = time.time()
            while not disp.pending_events() and last_time < blink_time:
                current_time = time.time()
                blink_next -= current_time - last_time
                if blink_next <= 0:
                    blink_next = blink_rate + blink_next
                    blink_state = not blink_state
                    draw(invert = blink_state)
                time.sleep(0.001)
                last_time = current_time

            if last_time >= blink_time:
                draw(invert = 0)
                do_blink = 0

        e = disp.next_event()
        if isinstance(e, Xlib.protocol.event.Expose):
            draw()
        elif isinstance(e, Xlib.protocol.event.ButtonPress):
            signal.alarm(0)
            if e.detail == X.Button1:
                pointer_grab_coord = (e.event_x, e.event_y)
                root.grab_pointer(True, X.PointerMotionMask | X.ButtonReleaseMask,
                                  X.GrabModeAsync, X.GrabModeAsync,
                                  0, 0, X.CurrentTime)
            elif e.detail == X.Button3:
                win.destroy()
        elif isinstance(e, Xlib.protocol.event.MotionNotify):
            win.configure(x=e.event_x - pointer_grab_coord[0], y=e.event_y - pointer_grab_coord[1])
        elif isinstance(e, Xlib.protocol.event.ButtonRelease):
            if e.detail == X.Button1:
                disp.ungrab_pointer(X.CurrentTime)
        elif isinstance(e, Xlib.protocol.event.DestroyNotify):
            break

def usage():
    print \
"""
syntax:
  xnotify [-hxtpfeidep] message

     -h, --help                      This help screen.
     -x file, --fromfile=file        Take text from file instead of standard input. If file is
                                     '-', takes from standard input.
     -t secs, --timeout=secs         Time to wait until message automatically gets off
                                     the screen (default: 5)
     -b color, --background=color    Color of the text's background (default: black)
     -f color, --foreground=color    Color of the text's foreground (default: white)
     -r color, --border=color        Color of the border (default: red)
     -n font, --font=name            Name of the font to use (default: 9x15bold)

     -l, --blink                     Make the window flash its colors (default: off)
     -d secs, --blink-duration=secs  Duration of the blink.
     -e secs, --blink-rate=secs      Rate of the blink (time between each color flip)

     -p x,y  --position=x,y          Initial screen position (default: 100, 100)
"""

def main(args):
    import getopt
    import sys

    try:
        opts, args = getopt.getopt(args, "ht:b:f:r:x:ld:e:p:n:",
                                   ["help", "timeout=",
                                    "background=", "foreground=",
                                    "border=", "fromfile=",
                                    "blink", "blink-duration=",
                                    "blink-rate=", "position=",
                                    "font="])
    except getopt.GetoptError:
        # print help information and exit:
        return usage()

    from_file = None
    param_dict = {}

    for option, value in opts:
        if option in ("-h", "--help"):
            return usage()
        if option in ("-t", "--timeout"):
            param_dict['timeout'] = float(value)
        if option in ("-b", "--background"):
            param_dict['background_color'] = value
        if option in ("-f", "--foreground"):
            param_dict['foreground_color'] = value
        if option in ("-r", "--border"):
            param_dict['border_color'] = value
        if option in ("-l", "--blink"):
            param_dict['do_blink'] = True
        if option in ("-d", "--blink-duration"):
            param_dict['blink_duration'] = float(value)
        if option in ("-e", "--blink-rate"):
            param_dict['blink_rate'] = float(value)
        if option in ("-x", "--fromfile"):
            from_file = value
        if option in ("-n", "--font"):
            param_dict['font_name'] = value
        if option in ("-p", "--position"):
            parts = value.split(",")
            if len(parts) == 2:
                x, y = parts
                x = float(x)
                y = float(y)
                param_dict['position'] = (x, y)

    if not from_file:
        param_dict['text'] = " ".join(args)
    else:
        if from_file == '-':
            param_dict['text'] = sys.stdin.read()
        else:
            param_dict['text'] = open(from_file).read()

    run(**param_dict)

if __name__ == "__main__":
    import sys
    main(sys.argv[1:])
